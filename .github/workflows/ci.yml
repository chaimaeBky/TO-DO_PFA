name: Full CI/CD Pipeline

on:
  push:
    branches: [master, frontendTest]
  pull_request:
    branches: [master]

jobs:
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './front'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run unit and integration tests
        run: npm test -- --coverage --watchAll=false

      - name: Convert coverage to lcov format
        run: |
          npm install -g lcov-result-merger
          lcov-result-merger 'coverage/lcov*.info' 'coverage/lcov.info'

      - name: Upload coverage for SonarCloud
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: front/coverage/lcov.info

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          cd back
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          cd back
          PYTHONPATH=./ pytest --cov=./ --cov-report xml:coverage.xml

      - name: Upload coverage for SonarCloud
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: back/coverage.xml

  build:
    needs: [frontend-test, backend-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'

      - name: Install and build frontend
        working-directory: './front'
        run: |
          npm ci
          npm run build

      - name: Archive production build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: front/dist/

  sonarcloud:
    name: SonarCloud Analysis
    needs: [frontend-test, backend-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for SonarCloud to get full commit history

      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: front/coverage/

      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: back/

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=your-project-key
            -Dsonar.organization=your-org
            -Dsonar.javascript.lcov.reportPaths=front/coverage/lcov.info
            -Dsonar.python.coverage.reportPaths=back/coverage.xml
            -Dsonar.qualitygate.wait=true

  deploy:
    needs: [build, sonarcloud]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/frontendTest'
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build

      - name: Determine environment
        id: env
        run: |
          if [ "$GITHUB_REF" == "refs/heads/master" ]; then
            echo "ENV=production" >> $GITHUB_ENV
            echo "Deploying to production"
          elif [ "$GITHUB_REF" == "refs/heads/frontendTest" ]; then
            echo "ENV=staging" >> $GITHUB_ENV
            echo "Deploying to staging"
          fi

      - name: Deploy
        run: |
          if [ "$ENV" == "production" ]; then
            echo "Add production deployment commands here"
          elif [ "$ENV" == "staging" ]; then
            echo "Add staging deployment commands here"
          fi
