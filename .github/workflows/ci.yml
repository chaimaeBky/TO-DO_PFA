name: Frontend CI/CD

on:
  push:
    branches: [master, frontendTest]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './front'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'

      - name: Install dependencies
        working-directory: './front'
        run: npm ci

      - name: Run unit and integration tests
        working-directory: './front'
        run: npm test

      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarqube-scan-action@v5.0.0
      #   env:
      #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #          projectBaseDir: .
      #          args: >
      #            -Dsonar.qualitygate.wait=true
      #            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
      #            -Dsonar.testExecutionReportPaths=test-results.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'
      - name: Install and build
        working-directory: './front'
        run: |
          npm ci
          npm run build
      - name: Archive production build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: front/dist/
  docker-push:
    needs: [test, build]  # Dépend des deux jobs
    if: github.ref == 'refs/heads/master'  # Limitez au branch master
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build and Push Backend
        working-directory: './back'
        run: |
          docker build -t saidaelajimi/to-do_pfa-back:latest -t saidaelajimi/to-do_pfa-back:${{ github.sha }} .
          docker push saidaelajimi/to-do_pfa-back:latest
          docker push saidaelajimi/to-do_pfa-back:${{ github.sha }}

      - name: Build and Push Frontend
        working-directory: './front'
        run: |
          docker build -t saidaelajimi/to-do_pfa-front:latest -t saidaelajimi/to-do_pfa-front:${{ github.sha }} .
          docker push saidaelajimi/to-do_pfa-front:latest
          docker push saidaelajimi/to-do_pfa-front:${{ github.sha }}

  deploy:
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/frontendTest'
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build

      - name: Determine environment
        id: env
        run: |
          if [ "$GITHUB_REF" == "refs/heads/master" ]; then
            echo "ENV=production" >> $GITHUB_ENV
            echo "Deploying to production"
          elif [ "$GITHUB_REF" == "refs/heads/frontendTest" ]; then
            echo "ENV=staging" >> $GITHUB_ENV
            echo "Deploying to staging"
          fi
      - name: Deploy
        run: |
          if [ "$ENV" == "production" ]; then
            echo "Ajoutez ici vos commandes de déploiement PRODUCTION"
            # Ex: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
          elif [ "$ENV" == "staging" ]; then
            echo "Ajoutez ici vos commandes de déploiement STAGING"
            # Ex: vercel --token ${{ secrets.VERCEL_TOKEN }}
          fi
