name: Frontend CI/CD Pipeline

on:
  push:
    branches: [master, frontendTest]
    paths:  
      - 'front/**'
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './front'
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: |
          npm run test:ci
          # Vérification que le rapport de couverture existe
          if [ ! -f "coverage/lcov.info" ]; then
            echo "::error::Fichier coverage/lcov.info non trouvé"
            exit 1
          fi

  sonar-analysis:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './front'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=chaimaeBky_TO-DO_PFA
            -Dsonar.organization=chaimaebky
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.exclusions=**/node_modules/**,**/static/**,tests/**
            -Dsonar.qualitygate.wait=true

  build:
    needs: [test, sonar-analysis]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install and build
        working-directory: './front'
        run: |
          npm ci
          npm run build

      - uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: front/dist/

  deploy:
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/frontendTest'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: frontend-build

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Determine environment
        id: env
        run: |
          if [ "$GITHUB_REF" == "refs/heads/master" ]; then
            echo "SERVER_IP=${{ secrets.PRODUCTION_SERVER_IP }}" >> $GITHUB_ENV
            echo "Deploying to production"
          else
            echo "SERVER_IP=${{ secrets.STAGING_SERVER_IP }}" >> $GITHUB_ENV
            echo "Deploying to staging"
          fi

      - name: Deploy to server
        run: |
          scp -o StrictHostKeyChecking=no -r ./dist ubuntu@$SERVER_IP:/var/www/html/
          ssh ubuntu@$SERVER_IP "sudo systemctl restart nginx"
