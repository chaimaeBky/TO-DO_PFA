name: Frontend CI/CD

on:
  push:
    branches: [master, frontendTest]
  pull_request:
    branches: [master]

jobs:
  # Analyse SonarCloud (exécutée en parallèle des tests)
  
  test:
  

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './front'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'

      - name: Install dependencies
        working-directory: './front'
        run: npm ci

      - name: Run unit and integration tests
        working-directory: './front'
        run: npm test

      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarqube-scan-action@v5.0.0
      #   env:
      #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #          projectBaseDir: .
      #          args: >
      #            -Dsonar.qualitygate.wait=true
      #            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
      #            -Dsonar.testExecutionReportPaths=test-results.xml
  sonar-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Nécessaire pour l'historique complet des commits

      

      # Frontend Analysis
      - name: Setup Node.js
        if: contains(github.ref, 'frontendTest') || contains(github.ref, 'master')
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'

      - name: Install frontend dependencies
        if: contains(github.ref, 'frontendTest') || contains(github.ref, 'master')
        working-directory: './front'
        run: npm ci

      - name: Run frontend tests with coverage
        if: contains(github.ref, 'frontendTest') || contains(github.ref, 'master')
        working-directory: './front'
        run: npm run test:ci

      # Analyse SonarCloud unifiée
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=chaimaeBky_TO-DO_PFA
            -Dsonar.organization=chaimaebky
            -Dsonar.branch.name=${{ github.head_ref || github.ref_name }}
            -Dsonar.sources=front/src,back
            -Dsonar.tests=front/tests,back/tests
            -Dsonar.javascript.lcov.reportPaths=front/coverage/lcov.info
            -Dsonar.python.coverage.reportPaths=back/coverage.xml
            -Dsonar.testExecutionReportPaths=front/test-results.xml,back/test-results.xml
            -Dsonar.exclusions=**/node_modules/**,**/migrations/**,**/static/**
            -Dsonar.qualitygate.wait=true

  # Vos jobs existants (test, build, docker-push, deploy)
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'
      - name: Install and build
        working-directory: './front'
        run: |
          npm ci
          npm run build
      - name: Archive production build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: front/dist/
  docker-push:
    needs: [test, build]
    if: github.ref == 'refs/heads/master'  # Exécution uniquement sur master
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Build and Push Backend
        working-directory: ./back
        run: |
          docker build -t $DOCKERHUB_USERNAME/to-do_pfa-back:latest .
          docker push $DOCKERHUB_USERNAME/to-do_pfa-back:latest

      - name: Build and Push Frontend
        working-directory: ./front
        run: |
          docker build -t $DOCKERHUB_USERNAME/to-do_pfa-front:latest .
          docker push $DOCKERHUB_USERNAME/to-do_pfa-front:latest

  deploy:
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/frontendTest'
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build

      - name: Determine environment
        id: env
        run: |
          if [ "$GITHUB_REF" == "refs/heads/master" ]; then
            echo "ENV=production" >> $GITHUB_ENV
            echo "Deploying to production"
          elif [ "$GITHUB_REF" == "refs/heads/frontendTest" ]; then
            echo "ENV=staging" >> $GITHUB_ENV
            echo "Deploying to staging"
          fi
      - name: Deploy
        run: |
          if [ "$ENV" == "production" ]; then
            echo "Ajoutez ici vos commandes de déploiement PRODUCTION"
            # Ex: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
          elif [ "$ENV" == "staging" ]; then
            echo "Ajoutez ici vos commandes de déploiement STAGING"
            # Ex: vercel --token ${{ secrets.VERCEL_TOKEN }}
          fi
